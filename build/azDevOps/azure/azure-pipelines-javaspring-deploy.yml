#############################################################################################################################
# This is a generated file which includes some replacements.                                                                #
# It is still very much recommended to go through this and ensure all variables are correct for your business/domain        #
# All variables are defined in a global scope.                                                                              #
# All Terraform produced resource names are using a labels module ensuring a predictable naming convention                  #
# E.g.: variables for company, project, stage and domain will produce a name of `$company-$project-$stage-$domain`          #
# NB: Some resources e.g. blob storage only allow for alpha numeric characters so the name is adjusted accordingly          #
#  ==> `$company$project$stage$domain`                                                                                      #
#############################################################################################################################
name: $(version_major).$(version_minor).$(Rev:r)-$(build_type)

pr:
  - main

trigger:
  branches:
    include:
      - 'main'
  paths:
    include:
      - '*'

resources:
  repositories:
    - repository: templates
      type: github
      name: Ensono/stacks-pipeline-templates
      ref: feature/cycle4
      # EXCHANGE THIS FOR YOUR OWN ENDPOINT CONNECTION TO GITHUB
      # REPOSITORY IS PUBLIC
      endpoint: ensonostacks

  # NOTE: To use the branch release containers, prefix with ensonostackseuweirdfmu.azurecr.io/
  # i.e. ensonostackseuweirdfmu.azurecr.io/ensono/eir-java:1.1.222
  containers:
    # Container for Java Build and Testing
    # Container for Sonar Scanner
    - container: azul_java
      image: ensono/eir-java:1.1.251
    # Container for Kubernetes Deployment
    - container: k8s_deploy
      image: ensono/eir-infrastructure:1.1.251

variables:
  - template: azuredevops-vars.yml

stages:
  - stage: Build
    variables:
      # You can find notes in the READMEs around which values to use for each ENV variable group
      - group: stacks-credentials-nonprod-kv
      - group: sonar-credentials
      - group: stacks-java-modules
      - group: stacks-java-module-parent
      - group: maven_credentials
    jobs:
      - job: ModuleBuild
        pool:
          vmImage: $(pool_vm_image)
        steps:
          - checkout: self
            fetchDepth: 0

          - checkout: templates

          # Validates all YAML files in the repo to check they adhere to standards
          - template: azDevOps/azure/templates/steps/java/test-validate-yaml.yml@templates
            parameters:
              pipeline_scripts_directory: "${{ variables.self_pipeline_scripts_dir }}"
              container: "k8s_deploy"
              yamllint_config_file: "${{ variables.yamllint_config_file }}"
              yamllint_scan_directory: "${{ variables.yamllint_scan_directory }}"

          # Builds the Java app and runs tests
          - template: azDevOps/azure/templates/steps/java/build-java.yml@templates
            parameters:
              repo_root_dir: "${{ variables.self_repo_dir }}"
              project_root_dir: "${{ variables.self_project_dir }}"
              pipeline_scripts_directory: "${{ variables.self_pipeline_scripts_dir }}"
              # Maven
              maven_cache_directory: "${{ variables.maven_cache_directory }}"
              maven_surefire_reports_dir: "${{ variables.maven_surefire_reports_dir }}"
              maven_allowed_test_tags: "${{ variables.maven_allowed_test_tags}}"
              maven_package_version: "${{ variables.maven_package_version }}"
              maven_settings_file: "${{ variables.maven_settings_file }}"
              # Docker
              docker_build_container: "${{ variables.docker_java_image }}"
              # Vulnerability Scanning
              vulnerability_scan: "${{ variables.vulnerability_scan }}"
              vulnerability_scan_fail_build_on_detection: "${{ variables.vulnerability_scan_fail_build_on_detection }}"
              vulnerability_scan_api_key: ${{ variables.vulnerability_scan_api_key }}
              vulnerability_scan_database_directory: ${{ variables.vulnerability_scan_database_directory }}
              project_type: "${{ variables.java_project_type }}"
              build_type: "${{ variables.build_type }}"
              # private key id to sign doc
              gpg_key_signing_id: "$(gpg-key-signing-id)"
              gpg_private_key: "$(gpg-private-key)"
              vulnerability_scan_report: "${{ variables.vulnerability_scan_report }}"

          # Performs static code analysis, such as Sonar Cloud
          - template: azDevOps/azure/templates/steps/java/test-static-code-analysis.yml@templates
            parameters:
              project_root_dir: "${{ variables.self_project_dir }}"
              pipeline_scripts_directory: "${{ variables.self_pipeline_scripts_dir}}"
              # PR / Branch vars
              source_branch_ref: "$(source_branch_ref)"
              target_branch_ref: "$(target_branch_ref)"
              pullrequest_number: "$(pullrequest_number)"
              # Sonar
              sonar_enable: true
              sonar_container: "azul_java"
              sonar_host_url: "https://sonarcloud.io"
              sonar_project_name: "$(SONAR_PROJECT_NAME)"
              sonar_project_key: "$(SONAR_PROJECT_KEY)"
              sonar_token: "$(SONAR_TOKEN)"
              sonar_organisation: "$(SONAR_ORGANISATION)"
              # Probably `GitHub` or `vsts`
              sonar_pullrequest_provider: "GitHub"
              sonar_remote_repo: "${{ variables.self_remote_repo }}"
              # Docker
              docker_image_tag: "${{ variables.docker_image_tag }}"

          # Deploy to the Maven Repository
          - template: azDevOps/azure/templates/steps/java/deploy-java.yml@templates
            parameters:
              repo_root_dir: "${{ variables.self_repo_dir }}"
              project_root_dir: "${{ variables.self_project_dir }}"
              pipeline_scripts_directory: "${{ variables.self_pipeline_scripts_dir }}"
              # Docker
              docker_build_container: "${{ variables.docker_java_image }}"
              # Project
              project_type: "${{ variables.java_project_type }}"
              build_type: "${{ variables.build_type }}"
              # MAVEN CENTRAL
              maven_id: "$(maven_id)"
              maven_username: "$(maven_username)"
              maven_password: "$(maven_password)"
              # private key id to sign doc
              gpg_key_signing_id: "$(gpg-key-signing-id)"
              gpg_private_key: "$(gpg-private-key)"

          # Post build tasks, such as Test and Coverage upload, and publishing artefacts
          - template: azDevOps/azure/templates/steps/java/post-build-tasks.yml@templates
            parameters:
              project_root_dir: "${{ variables.self_project_dir }}"
              functional_test_project_root_dir: "${{ variables.self_functional_testproject_dir }}"
              # Build Output File
              # files to be persisted across stages
              build_file: false
              build_file_path: "${{ variables.build_artifact_deploy_path }}"
              build_file_artefact_name: "${{ variables.build_artifact_deploy_name }}"
              # Functional tests
              functional_test: ${{ variables.functional_test }}
              functional_test_artefact_name: "${{ variables.functional_test_artefact_name }}"
              functional_test_artefact_path: "${{ variables.functional_test_artefact_path }}"
              vulnerability_scan: "${{ variables.vulnerability_scan }}"
              vulnerability_scan_report: "${{ variables.vulnerability_scan_report }}"
              vulnerability_scan_database_directory: "${{ variables.vulnerability_scan_database_directory }}"
              java_project_type: "${{ variables.java_project_type }}"
              functional_test_project_type: "${{ variables.functional_test_project_type }}"
              # Docker
              docker_build_container: "${{ variables.docker_java_image }}"

      # yamllint disable rule:comments-indentation
      # - job: ArchetypeBuild
      #   dependsOn: ModuleBuild
      #   pool:
      #     vmImage: $(pool_vm_image)
      #   variables:
      #     - group: release-github-credentials
      #   steps:
      #     - checkout: self

      #     - checkout: templates

      #     # Validates all YAML files in the repo to check they adhere to standards
      #     - template: azDevOps/azure/templates/steps/java/test-validate-yaml.yml@templates
      #       parameters:
      #         pipeline_scripts_directory: "${{ variables.self_pipeline_scripts_dir }}"
      #         container: "k8s_deploy"
      #         yamllint_config_file: "${{ variables.yamllint_config_file }}"
      #         yamllint_scan_directory: "${{ variables.yamllint_scan_directory }}"

      #     # Builds the Java archetype and deploy to the artifact repository
      #     - template: azDevOps/azure/templates/steps/java/build-java-archetype.yml@templates
      #       parameters:
      #         repo_root_dir: "${{ variables.self_repo_dir }}"
      #         project_root_dir: "${{ variables.self_project_dir }}"
      #         pipeline_scripts_directory: "${{ variables.self_pipeline_scripts_dir }}"
      #         # Maven
      #         maven_cache_directory: "${{ variables.maven_cache_directory }}"
      #         maven_surefire_reports_dir: "${{ variables.maven_surefire_reports_dir }}"
      #         maven_allowed_test_tags: "${{ variables.maven_allowed_test_tags}}"
      #         maven_package_version: "${{ variables.maven_package_version }}"
      #         maven_pom_file: "${{ variables.maven_archetype_pom_file }}"
      #         maven_archetype_properties_file: "${{ variables.maven_archetype_properties_file }}"
      #         maven_settings_file: "${{ variables.maven_settings_file }}"
      #         maven_repository_server: "${{ variables.maven_repository_server }}"
      #         # OSSRH
      #         ossrh_jira_id: "$(ossrh-jira-id)"
      #         ossrh_jira_password: "$(ossrh-jira-password)"
      #         # Docker
      #         docker_build_container: "${{ variables.docker_java_image }}"
      #         project_type: "${{ variables.java_project_type }}"
      #         build_type: "${{ variables.build_type }}"
      #         # private key id to sign doc
      #         gpg_private_key: "$(gpg-private-key)"
      #         gpg_key_signing_id: "$(gpg-key-signing-id)"

      #     - task: PowerShell@2
      #       condition: eq(variables['build_type'], 'RELEASE')
      #       inputs:
      #         targetType: inline
      #         script: |
      #           Import-Module /modules/EnsonoBuild
      #           Publish-GitHubRelease -GenerateReleaseNotes $true -UploadArtifacts $false
      #       env:
      #         STAGE: "release"
      #         PUBLISH_RELEASE: "true"
      #       target:
      #         container: k8s_deploy
      #       displayName: Publish GitHub Release
